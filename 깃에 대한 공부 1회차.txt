Git에 대한 공부

<Git>
-깃은 버전관리시스템이다.
-버전관리시스템이란? 시간의 흐름에 따라 사용자가 프로젝트 변화를 관리할 수 있게 해주는 
-버전관리시스템을 통해 무엇을 얻을 수 있는가? 매일 수천개씩 번화하는 코드의 변화를 추적하고 조합하며 되돌리기 쉽게 도와주는 역할을 한다
-쉽게 말해서 체크포인트의 역할을 해줄 수 있는 것이다. 망해도 다시 돌릴 수 있다는 말이다

<Github>
-Git과 다르게 웹서비스이다. 
-웹사이트이기 때문에 저장소(클라우드)가 필요하다. 계정이 필요하고 인터넷이 필요하다.
-Github를 배우기 전에 Git을 먼저 배워야된다고 하는데 왜??
Github는 깃에 대한 약간의 지식이 필요하다. 깃과 깃 사용자를 위해 만들어진 도구이기 때문에

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
<깃과 소통하는 방법 = 터미널,GUI>
*터미널 vs GUI

커맨드라인(터미널)은 객관적으로 시각적인 불편함이 있지만 처리가 훨씬 빠르고 커맨드라인에서만 실행가능한 명령이 있다. 그리고 어떤 컴퓨터를 사용하더라도 똑같다

GUI는 진입장벽이 낮다고 시각적으로 보기에 편하게 만들어준다. 하지만 해석문제에서 오류가 발생할 수도 있고 제한적인 부분이 있다
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
<Git Repo란 무엇일까?>
-Git Repo는 깃 저장소이다. 
-우리는 수동으로 저장소를 지정해줘야한다. 이 저장소는 프로젝트의 이력을 갖고 있는 깃 작업 공간이 된다
-저장소는 여러개를 지정할 수 있는데 모든 저장소는 고유 이력을 갖는다. 저장소들은 서로 관련도 없고 연결되어 있지도 않다
-지정해줘야하는 이유는 위 특성때문에 내가 다른 작업하는 것들로 부터 영향을 받지 않게 하기 위함이다

<Git Repo를 실체화하는 방법>
-git status : 현재 위치한 저장소의 상태를 보고해주는 명령어
-git init : 터미널에서 어느 디렉토리에 있든 그 장소에 새 저장소(.git)를 생성한다

*흔히 저지르는 실수
-깃 저장소가 있을 때 한 디렉토리 안에서 초기화해야 한다
깃
상위레벨에서 제어하는 하향식이다
-어떤 프로젝트를 위해 이 디렉토리에서 변경하는 파일이나 폴더는 깃에 의해 추적된다
-현재 존재하고 있는 저장소 안에 다른 저장소를 초기화 하고 싶지 않다는 것을 이해하는 것은 중요

<커밋이 무엇일까?>
깃 커밋 : 깃 저장소에 있는 체크포인트 중에 하나
*앞으로 알아야 할 것 : 커밋으로 돌아가는 방법 , 커밋하는 방법
-git add : 변경사항들을 추가하는 기능
-commit을 할 때 커밋 메세지가 그 커밋에 포함되는 변경사하에 대한 요약을 포함해야 한다, 해서 git commit -m "" 명령을 추천한다